package com.jermey.navplayground.demo.destinations

import com.jermey.quo.vadis.core.navigation.core.Destination

// THIS FILE CONTAINS EXAMPLE OF API USING ANNOTATIONS WHICH WE WANT TO ACHIEVE IN THE FUTURE
// IT IS NOT CURRENTLY USED BY THE APPLICATION AND IS ONLY FOR ILLUSTRATION PURPOSES

@Graph("master_detail")
sealed class MasterDetailDestination : Destination {
    @Route("master_detail/list")
    object List : MasterDetailDestination()

    @Route("master_detail/detail")
    @Argument(DetailData::class)
    data class Detail(val data: DetailData) : MasterDetailDestination()
}

fun masterDetailGraph() = navigationGraph(MasterDetailDestination::class) {
    startDestination(MasterDetailDestination.List)

    // Use scope-aware destination for shared element support
    destinationWithScopes(
        destination = MasterDetailDestination.List,
        transition = NavigationTransitions.SlideHorizontal
    ) { _, navigator, transitionScope ->
        MasterListScreen(
            onItemClick = { itemId ->
                navigator.navigate(
                    MasterDetailDestination.Detail(itemId),
                    NavigationTransitions.SlideHorizontal
                )
            },
            onBack = { navigator.navigateBack() }
        )
    }

    typedDestination(MasterDetailDestination.Detail::class) { data: DetailData, navigator ->
        DetailScreen(
            itemId = data.itemId,
            onBack = { navigator.navigateBack() },
            onNavigateToRelated = { relatedId ->
                navigator.navigate(
                    MasterDetailDestination.Detail(relatedId),
                    NavigationTransitions.SlideHorizontal
                )
            }
        )
    }
}