[
  {
    "id": "Demo/demo",
    "title": "Demo",
    "route": "/Demo/demo",
    "content": "@components/CodeBlock/CodeBlock \n\nconst bottomNavCode = `val bottomNavGraph = navigationGraph( ) {\n        startDestination(HomeDestination.Main)\n        destination(HomeDestination.Main) { _, nav -> HomeScreen(nav) }\n        destination(HomeDestination.Details) { _, nav -> DetailsScreen(nav) }\n    }\n    \n    tab( ) {\n        startDestination(ProfileDestination.Main)\n        destination(ProfileDestination.Main) { _, nav -> ProfileScreen(nav) }\n    }\n    \n    tab( ) {\n        startDestination(SettingsDestination.Main)\n        destination(SettingsDestination.Main) { _, nav -> SettingsScreen(nav) }\n    }\n}`\n\nconst masterDetailCode = `// List screen\nLazyColumn {\n    items(products) { product ->\n        ProductCard(\n            product = product,\n            onClick = { \n                navigator.navigate(ProductDestination.Details(product.id)) \n            },\n            imageModifier = Modifier.sharedElement(\n                sharedConfig = SharedElementConfig(\n                    key =  ,\n                    type = SharedElementType.Bounds\n                ),\n                navigator = navigator\n            )\n        )\n    }\n}`\n\nconst multiStepCode = `sealed class ProcessStep : Destination {\n    object Step1 : ProcessStep() { override val route =   }\n    object Step2 : ProcessStep() { override val route =   }\n    object Step3 : ProcessStep() { override val route =   }\n    object Complete : ProcessStep() { override val route =   }\n}\n\n// Navigate forward through steps\nfun onNext(currentStep: ProcessStep) {\n    when (currentStep) {\n        is ProcessStep.Step1 -> navigator.navigate(ProcessStep.Step2)\n        is ProcessStep.Step2 -> navigator.navigate(ProcessStep.Step3)\n        is ProcessStep.Step3 -> navigator.navigateAndClearTo(\n            destination = ProcessStep.Complete,\n            clearRoute =  ,\n            inclusive = false\n        )\n    }\n}`\n\nconst cloneRunCode = `# Clone the repository\ngit clone https://github.com/jermeyyy/quo-vadis.git\ncd quo-vadis\n\n# Run on Android\n./gradlew :composeApp:installDebug\n\n# Run on iOS (macOS only)\nopen iosApp/iosApp.xcodeproj\n\n# Run on Desktop\n./gradlew :composeApp:run\n\n# Run on Web (JavaScript)\n./gradlew :composeApp:jsBrowserDevelopmentRun\n\n# Run on Web (WebAssembly)\n./gradlew :composeApp:wasmJsBrowserDevelopmentRun`\n\nconst mainAppCode = `@Composable\nfun DemoApp() {\n    val navigator = rememberNavigator()\n    \n    LaunchedEffect(Unit) {\n        // Register all feature graphs\n        navigator.registerGraph(homeGraph)\n        navigator.registerGraph(profileGraph)\n        navigator.registerGraph(settingsGraph)\n        \n        // Set initial destination\n        navigator.setStartDestination(MainDestination.Home)\n    }\n    \n    Scaffold(\n        bottomBar = {\n            BottomNavigationBar(\n                currentRoute = navigator.currentDestination.value?.route,\n                onTabSelected = { destination ->\n                    navigator.navigate(destination)\n                }\n            )\n        }\n    ) { paddingValues ->\n        GraphNavHost(\n            graph = mainGraph,\n            navigator = navigator,\n            modifier = Modifier.padding(paddingValues),\n            defaultTransition = NavigationTransitions.SlideHorizontal,\n            enablePredictiveBack = true\n        )\n    }\n}`\n\nconst featureModuleCode = `object ProductFeature {\n    // Public destinations (entry points)\n    sealed class Destination : com.jermey.quo.vadis.core.navigation.core.Destination {\n        object List : Destination() {\n            override val route =  \n        }\n        \n        data class Details(val productId: String) : Destination() {\n            override val route =  \n            override val arguments = mapOf(  to productId)\n        }\n    }\n    \n    // Navigation graph (internal structure hidden)\n    fun graph() = navigationGraph( ) {\n        startDestination(Destination.List)\n        \n        destination(Destination.List) { _, navigator ->\n            ProductListScreen(\n                onProductClick = { id ->\n                    navigator.navigate(Destination.Details(id))\n                }\n            )\n        }\n        \n        destination(SimpleDestination( )) { dest, navigator ->\n            val productId = dest.arguments[ >Navigation Patterns Demonstrated</h2>\n        \n        <h3 id= >1. Bottom Navigation Pattern</h3>\n        <p>\n          The demo uses bottom navigation for main app sections (Home, Profile, Settings). \n          Each tab maintains its own independent back stack, allowing users to navigate \n          deeply within a section without losing their place in other tabs.\n        </p>\n        <CodeBlock code={bottomNavCode} language= >2. Master-Detail Flow</h3>\n        <p>\n          Classic list-to-detail pattern enhanced with shared element transitions. \n          Images and text smoothly animate from the list to the detail screen.\n        </p>\n        <CodeBlock code={masterDetailCode} language= >3. Multi-Step Process</h3>\n        <p>\n          Wizard-style flows are handled elegantly with backstack management. \n          The demo includes validation, progress tracking, and the ability to jump \n          to specific steps.\n        </p>\n        <CodeBlock code={multiStepCode} language= >4. Nested Navigation</h3>\n        <p>\n          The demo shows how to implement tabs within tabs - a common pattern in \n          complex applications. Each level of navigation is independent and maintains \n          its own state.\n        </p>\n\n        <h3 id= >5. Transition Showcase</h3>\n        <p>A dedicated screen demonstrates all available transitions:</p>\n        <ul>\n          <li><strong>Slide Horizontal:</strong> Standard left/right slide</li>\n          <li><strong>Slide Vertical:</strong> Bottom-up modal style</li>\n          <li><strong>Fade:</strong> Simple cross-fade</li>\n          <li><strong>Fade Through:</strong> Material Design fade through</li>\n          <li><strong>Scale In:</strong> Zoom-in effect</li>\n          <li><strong>Custom:</strong> User-defined transitions</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Running the Demo</h2>\n        \n        <h3>Prerequisites</h3>\n        <ul>\n          <li>Kotlin 2.2.20+</li>\n          <li>Android Studio or IntelliJ IDEA</li>\n          <li>For iOS: macOS with Xcode installed</li>\n        </ul>\n\n        <h3>Clone and Run</h3>\n        <CodeBlock code={cloneRunCode} language= >Code Examples from Demo</h2>\n        \n        <h3>Main Application Structure</h3>\n        <CodeBlock code={mainAppCode} language=  showLineNumbers />\n\n        <h3>Feature Module Example</h3>\n        <CodeBlock code={featureModuleCode} language=  showLineNumbers />\n      </section>\n\n      <section>\n        <h2 id= >Explore More</h2>\n        <ul>\n          <li><a href= >Demo Source Code</a> - Full implementation on GitHub</li>\n          <li><a href= >Getting Started</a> - Build your own navigation</li>\n          <li><a href= >Features</a> - Learn about all capabilities</li>\n          <li><a href="
  },
  {
    "id": "Features/AnnotationAPI/annotationapi",
    "title": "Annotation A P I",
    "route": "/Features/AnnotationAPI/annotationapi",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css )\nsealed class ShopDestination : Destination\n\n// 2. Add destinations with routes\n@Route( )\ndata object ProductList : ShopDestination()\n\n// 3. Add typed destinations with arguments\n@Serializable\ndata class ProductData(val productId: String, val mode: String =  )\n@Argument(ProductData::class)\ndata class ProductDetail(\n    val productId: String,\n    val mode: String =  \n) : ShopDestination(), TypedDestination<ProductData> {\n    override val data = ProductData(productId, mode)\n}\n\n// 4. Define content with @Content annotation\n@Content(ProductList::class)\n@Composable\nfun ProductListContent(navigator: Navigator) {\n    ProductListScreen(\n        onProductClick = { id ->\n            // Type-safe navigation with generated extension\n            navigator.navigateToProductDetail(\n                productId = id,\n                mode =  \n            )\n        }\n    )\n}\n\n@Content(ProductDetail::class)\n@Composable\nfun ProductDetailContent(data: ProductData, navigator: Navigator) {\n    ProductDetailScreen(\n        productId = data.productId,\n        mode = data.mode,\n        onBack = { navigator.navigateBack() }\n    )\n}\n\n// 5. Use generated graph builder\nval shopGraph = buildShopDestinationGraph()\n\n// That >Complete Example</h2>\n        <CodeBlock code={annotationExample} language=  showLineNumbers />\n      </section>\n\n      <section>\n        <h2 id= >What Gets Generated</h2>\n        <ul>\n          <li><strong>Route Initializers:</strong> Automatic route registration objects</li>\n          <li><strong>Graph Builders:</strong> <code>build&#123;GraphName&#125;Graph()</code> functions</li>\n          <li><strong>Typed Extensions:</strong> <code>navigateTo&#123;DestinationName&#125;()</code> functions</li>\n          <li><strong>Serialization Code:</strong> Argument encoding/decoding logic</li>\n        </ul>\n\n        <p style={{ marginTop:  >Type-Safe Navigation</a> for the manual approach.\n        </div>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Get started</a> with the quick start guide</li>\n          <li><a href= >Type-Safe Navigation</a> - Learn about the manual DSL approach</li>\n          <li><a href="
  },
  {
    "id": "Features/BackStack/backstack",
    "title": "Back Stack",
    "route": "/Features/BackStack/backstack",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css >Operations</h2>\n        <CodeBlock code={backStackCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Use Cases</h2>\n        <ul>\n          <li>Multi-step wizards with complex navigation</li>\n          <li>Authentication flows that clear login screens</li>\n          <li>Tab-based navigation with independent stacks</li>\n          <li>Undo/redo functionality</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >See the demo</a> for multi-step process examples</li>\n          <li><a href="
  },
  {
    "id": "Features/DIIntegration/diintegration",
    "title": "D I Integration",
    "route": "/Features/DIIntegration/diintegration",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css ) {\n    destination(HomeDestination) { _, navigator ->\n        val viewModel: HomeViewModel = koinInject()\n        HomeScreen(viewModel, navigator)\n    }\n}`\n\nconst customInjectionCode = `// Create custom destination factory\ninterface DestinationFactory {\n    @Composable\n    fun create(destination: Destination, navigator: Navigator)\n}\n\n// Use in navigation graph\nval graph = navigationGraph( >Koin Example</h2>\n        <CodeBlock code={koinCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Custom Injection</h2>\n        <CodeBlock code={customInjectionCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Modular Architecture</a> - Structure your features</li>\n          <li><a href="
  },
  {
    "id": "Features/DeepLinks/deeplinks",
    "title": "Deep Links",
    "route": "/Features/DeepLinks/deeplinks",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css ) {\n    // Simple path\n    deepLink( ) {\n        HomeDestination\n    }\n    \n    // Path parameters\n    deepLink( ) { args ->\n        UserDestination(userId = args[ ] as String)\n    }\n    \n    // Query parameters\n    deepLink( ) { args ->\n        SearchDestination(query = args[ ] as String)\n    }\n    \n    // Optional parameters\n    deepLink( ) { args ->\n        SettingsDestination(section = args[ >Pattern Matching</h2>\n        <CodeBlock code={deepLinkCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Platform Integration</h2>\n        <ul>\n          <li><strong>Android:</strong> Intent filters and App Links</li>\n          <li><strong>iOS:</strong> Universal Links and custom URL schemes</li>\n          <li><strong>Web:</strong> Direct URL navigation</li>\n          <li><strong>Desktop:</strong> Custom protocol handlers</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Multiplatform Support</a> - Deep links on all platforms</li>\n          <li><a href="
  },
  {
    "id": "Features/features",
    "title": "Features",
    "route": "/Features/features",
    "content": "@components/CodeBlock/CodeBlock ./Features.module.css )\nsealed class ShopDestination : Destination\n\n// 2. Add destinations with routes\n@Route( )\ndata object ProductList : ShopDestination()\n\n// 3. Add typed destinations with arguments\n@Serializable\ndata class ProductData(val productId: String, val mode: String =  )\n@Argument(ProductData::class)\ndata class ProductDetail(\n    val productId: String,\n    val mode: String =  \n) : ShopDestination(), TypedDestination<ProductData> {\n    override val data = ProductData(productId, mode)\n}\n\n// 4. Define content with @Content annotation\n@Content(ProductList::class)\n@Composable\nfun ProductListContent(navigator: Navigator) {\n    ProductListScreen(\n        onProductClick = { id ->\n            // Type-safe navigation with generated extension\n            navigator.navigateToProductDetail(\n                productId = id,\n                mode =  \n            )\n        }\n    )\n}\n\n@Content(ProductDetail::class)\n@Composable\nfun ProductDetailContent(data: ProductData, navigator: Navigator) {\n    ProductDetailScreen(\n        productId = data.productId,\n        mode = data.mode,\n        onBack = { navigator.navigateBack() }\n    )\n}\n\n// 5. Use generated graph builder\nval shopGraph = buildShopDestinationGraph()\n\n// That )\nsealed class FeatureDestination : Destination\n\n@Route( )\ndata object List : FeatureDestination()\n\n@Serializable\ndata class DetailData(val id: String, val mode: ViewMode = ViewMode.READ)\n\n@Route( )\n@Argument(DetailData::class)\ndata class Details(val id: String, val mode: ViewMode = ViewMode.READ) \n    : FeatureDestination(), TypedDestination<DetailData> {\n    override val data = DetailData(id, mode)\n}\n\n// Navigate with generated extension\nnavigator.navigateToDetails(id =  , mode = ViewMode.EDIT)`\n\nconst typeSafeManualCode = `// Define destinations manually\nsealed class FeatureDestination : Destination {\n    object List : FeatureDestination() {\n        override val route =  \n    }\n    \n    data class Details(\n        val id: String,\n        val mode: ViewMode = ViewMode.READ\n    ) : FeatureDestination() {\n        override val route =  \n        override val arguments = mapOf(\n              to mode.name\n        )\n    }\n}\n\n// Navigate with destination instance\nnavigator.navigate(FeatureDestination.Details( , ViewMode.EDIT))`\n\nconst backStackCode = `// Access current stack\nval backStack = navigator.backStack.value\n\n// Pop multiple destinations\nnavigator.popBackStack(count = 3)\n\n// Clear to specific destination\nnavigator.navigateAndClearTo(\n    destination = HomeDestination,\n    clearRoute =  ,\n    inclusive = true\n)\n\n// Replace current destination\nnavigator.navigateAndReplace(NewDestination)\n\n// Clear everything and start fresh\nnavigator.navigateAndClearAll(StartDestination)`\n\nconst deepLinkCode = `val graph = navigationGraph( ) {\n    // Simple path\n    deepLink( ) {\n        HomeDestination\n    }\n    \n    // Path parameters\n    deepLink( ) { args ->\n        UserDestination(userId = args[ ] as String)\n    }\n    \n    // Query parameters\n    deepLink( ) { args ->\n        SearchDestination(query = args[ ] as String)\n    }\n    \n    // Optional parameters\n    deepLink( ) { args ->\n        SettingsDestination(section = args[ ] as? String)\n    }\n}`\n\nconst predictiveBackCode = `GraphNavHost(\n    graph = mainGraph,\n    navigator = navigator,\n    enablePredictiveBack = true,\n    predictiveBackAnimationType = PredictiveBackAnimationType.Material3\n)`\n\nconst sharedElementCode = `// Define shared element configuration\nval imageConfig = SharedElementConfig(\n    key =  ,\n    type = SharedElementType.Bounds\n)\n\n// Source screen\nImage(\n    modifier = Modifier.sharedElement(\n        sharedConfig = imageConfig,\n        navigator = navigator\n    )\n)\n\n// Destination screen (same key!)\nImage(\n    modifier = Modifier.sharedElement(\n        sharedConfig = imageConfig,\n        navigator = navigator\n    )\n)`\n\nconst mviCode = `// Navigation as intents\nsealed class Intent {\n    data class NavigateToDetails(val id: String) : Intent()\n    object NavigateBack : Intent()\n}\n\n// Handle in reducer\nfun reduce(intent: Intent) {\n    when (intent) {\n        is Intent.NavigateToDetails -> {\n            navigator.navigate(DetailsDestination(intent.id))\n        }\n        is Intent.NavigateBack -> {\n            navigator.navigateBack()\n        }\n    }\n}\n\n// Or as side effects\nsealed class SideEffect {\n    data class Navigate(val destination: Destination) : SideEffect()\n}\n\n// Handle side effects\nviewModel.sideEffects.collect { effect ->\n    when (effect) {\n        is SideEffect.Navigate -> navigator.navigate(effect.destination)\n    }\n}`\n\nconst customTransitionCode = `val customTransition = NavigationTransition(\n    enter = slideInVertically { it } + fadeIn(),\n    exit = slideOutVertically { -it / 2 } + fadeOut(),\n    popEnter = slideInVertically { -it / 2 } + fadeIn(),\n    popExit = slideOutVertically { it } + fadeOut()\n)`\n\nconst testingCode = `@Test\nfun \\`navigates to details when item clicked\\`() {\n    // Arrange\n    val navigator = FakeNavigator()\n    val viewModel = ProductListViewModel(navigator)\n    \n    // Act\n    viewModel.onProductClicked( )\n    \n    // Assert\n    assertEquals(\n        ProductDestination.Details( ),\n        navigator.lastDestination\n    )\n}\n\n@Test\nfun \\`clears backstack on logout\\`() {\n    // Arrange\n    val navigator = FakeNavigator()\n    val viewModel = SettingsViewModel(navigator)\n    \n    // Act\n    viewModel.onLogout()\n    \n    // Assert\n    assertTrue(navigator.backStackCleared)\n    assertEquals(LoginDestination, navigator.lastDestination)\n}`\n\nconst modularCode = `// Feature exposes navigation graph\nobject ProfileFeature {\n    fun navigationGraph(): NavigationGraph = navigationGraph( ) {\n        startDestination(ProfileDestination.List)\n        \n        destination(ProfileDestination.List) { _, nav -> ... }\n        destination(ProfileDestination.Details) { _, nav -> ... }\n    }\n    \n    // Public entry points\n    val entryPoint: Destination = ProfileDestination.List\n}\n\n// Main app integrates feature\nval mainGraph = navigationGraph( ) {\n    includeGraph(ProfileFeature.navigationGraph())\n    \n    // Navigate to feature\n    navigator.navigate(ProfileFeature.entryPoint)\n}`\n\nconst koinCode = `val graph = navigationGraph( ) {\n    destination(HomeDestination) { _, navigator ->\n        val viewModel: HomeViewModel = koinInject()\n        HomeScreen(viewModel, navigator)\n    }\n}`\n\nconst customInjectionCode = `// Create custom destination factory\ninterface DestinationFactory {\n    @Composable\n    fun create(destination: Destination, navigator: Navigator)\n}\n\n// Use in navigation graph\nval graph = navigationGraph( >Getting Started - Alternative Approach</a>.\n        </div>\n      </section>\n\n      <section>\n        <h2 id= >Type-Safe Navigation</h2>\n        <p>\n          Quo Vadis eliminates string-based routing entirely, providing compile-time safety \n          for all navigation operations through two approaches: the annotation-based API (recommended) \n          and the manual DSL (for advanced use cases).\n        </p>\n\n        <h3>Benefits</h3>\n        <ul>\n          <li><strong>Compile-time Safety:</strong> Catch navigation errors at compile time with sealed classes</li>\n          <li><strong>IDE Support:</strong> Full autocompletion and refactoring for both approaches</li>\n          <li><strong>Type-safe Arguments:</strong> Pass complex data types, not just strings</li>\n          <li><strong>Two Approaches:</strong> Use annotations (recommended) or manual DSL (advanced)</li>\n        </ul>\n\n        <h3>Annotation-Based Approach (Recommended)</h3>\n        <CodeBlock code={typeSafeAnnotationCode} language=  />\n\n        <h3>Manual DSL Approach</h3>\n        <CodeBlock code={typeSafeManualCode} language=  />\n\n        <p>\n          Both approaches provide complete type safety and work seamlessly together. \n          The annotation-based approach requires less code and generates helpful extensions,\n          while the manual DSL offers more control for complex scenarios.\n        </p>\n      </section>\n\n      <section>\n        <h2 id= >BackStack Management</h2>\n        <p>\n          Direct access to the navigation back stack provides unprecedented control over \n          navigation state. Manipulate the stack programmatically for complex navigation flows.\n        </p>\n\n        <h3>Operations</h3>\n        <CodeBlock code={backStackCode} language=  />\n\n        <h3>Use Cases</h3>\n        <ul>\n          <li>Multi-step wizards with complex navigation</li>\n          <li>Authentication flows that clear login screens</li>\n          <li>Tab-based navigation with independent stacks</li>\n          <li>Undo/redo functionality</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Deep Link Support</h2>\n        <p>\n          Comprehensive deep linking system that works across all platforms. Define URL \n          patterns and automatically map them to type-safe destinations.\n        </p>\n\n        <h3>Pattern Matching</h3>\n        <CodeBlock code={deepLinkCode} language=  />\n\n        <h3>Platform Integration</h3>\n        <ul>\n          <li><strong>Android:</strong> Intent filters and App Links</li>\n          <li><strong>iOS:</strong> Universal Links and custom URL schemes</li>\n          <li><strong>Web:</strong> Direct URL navigation</li>\n          <li><strong>Desktop:</strong> Custom protocol handlers</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Predictive Back Navigation</h2>\n        <p>\n          Modern, gesture-driven back navigation with smooth animations. Users can preview \n          the previous screen before committing to navigation.\n        </p>\n\n        <h3>Supported Platforms</h3>\n        <ul>\n          <li><strong>Android 13+:</strong> System predictive back API</li>\n          <li><strong>iOS:</strong> Interactive pop gesture</li>\n          <li><strong>Custom Implementations:</strong> Desktop and Web</li>\n        </ul>\n\n        <h3>Features</h3>\n        <ul>\n          <li>Smooth, interruptible animations</li>\n          <li>Cross-fade between screens</li>\n          <li>Scale and position transitions</li>\n          <li>Cancelable gestures</li>\n        </ul>\n\n        <CodeBlock code={predictiveBackCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Shared Element Transitions</h2>\n        <p>\n          Material Design 3 shared element transitions with full bidirectional support. \n          Create stunning visual continuity between screens.\n        </p>\n\n        <h3>Key Features</h3>\n        <ul>\n          <li><strong>Bidirectional:</strong> Works for both forward and back navigation</li>\n          <li><strong>Type-Safe:</strong> Compile-time verified shared element keys</li>\n          <li><strong>Flexible:</strong> Bounds, content, or both transitions</li>\n          <li><strong>Platform-Aware:</strong> Native behavior on each platform</li>\n        </ul>\n\n        <h3>Example</h3>\n        <CodeBlock code={sharedElementCode} language=  />\n\n        <h3>Transition Types</h3>\n        <ul>\n          <li><strong>Bounds:</strong> Animate position and size</li>\n          <li><strong>Content:</strong> Cross-fade content</li>\n          <li><strong>Both:</strong> Animate bounds and content together</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >MVI Architecture Support</h2>\n        <p>\n          First-class integration with MVI (Model-View-Intent) architecture pattern. \n          Navigation intents, state, and side effects are handled cleanly.\n        </p>\n\n        <h3>Integration</h3>\n        <CodeBlock code={mviCode} language=  />\n      </section>\n\n      <section>\n        <h2 id=  />\n      </section>\n\n      <section>\n        <h2 id= >Testing Support</h2>\n        <p>\n          Built-in testing utilities make it easy to verify navigation behavior without \n          UI testing. Test navigation logic in fast, reliable unit tests.\n        </p>\n\n        <h3>FakeNavigator</h3>\n        <CodeBlock code={testingCode} language=  />\n\n        <h3>Verification Methods</h3>\n        <ul>\n          <li><code>verifyNavigate(destination)</code> - Verify navigation to destination</li>\n          <li><code>verifyNavigateBack()</code> - Verify back navigation</li>\n          <li><code>clearCalls()</code> - Reset navigation call history</li>\n          <li><code>navigationCalls</code> - Access full navigation history</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Modular Architecture</h2>\n        <p>\n          Gray box pattern support enables true modular architecture. Features can \n          define their own navigation graphs and expose public entry points.\n        </p>\n\n        <h3>Feature Module Example</h3>\n        <CodeBlock code={modularCode} language=  />\n\n        <h3>Benefits</h3>\n        <ul>\n          <li>Independent feature development</li>\n          <li>Clear module boundaries</li>\n          <li>Reusable feature modules</li>\n          <li>Easier testing and maintenance</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >DI Framework Integration</h2>\n        <p>\n          Easy integration with popular DI frameworks like Koin, Kodein, and others. \n          Inject dependencies into destination composables seamlessly.\n        </p>\n\n        <h3>Koin Example</h3>\n        <CodeBlock code={koinCode} language=  />\n\n        <h3>Custom Injection</h3>\n        <CodeBlock code={customInjectionCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Performance</h2>\n        <p>\n          Optimized for performance with minimal overhead. Lazy initialization, \n          efficient state management, and smart recomposition.\n        </p>\n\n        <h3>Optimizations</h3>\n        <ul>\n          <li><strong>Lazy Loading:</strong> Destinations created only when needed</li>\n          <li><strong>Efficient State:</strong> StateFlow with structural sharing</li>\n          <li><strong>Smart Recomposition:</strong> Minimal recomposition on navigation</li>\n          <li><strong>No Reflection:</strong> Zero runtime reflection overhead</li>\n          <li><strong>Small Footprint:</strong> No external dependencies</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >No External Dependencies</h2>\n        <p>\n          Quo Vadis is completely self-contained with zero external navigation dependencies. \n          This means:\n        </p>\n        <ul>\n          <li>Smaller app size</li>\n          <li>No version conflicts</li>\n          <li>No dependency chain issues</li>\n          <li>Full control over updates</li>\n          <li>Better long-term stability</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Get started</a> with the quick start guide</li>\n          <li><a href= >See the demo</a> to explore features in action</li>\n          <li><a href= >Browse API docs</a> for detailed reference</li>\n          <li><a href="
  },
  {
    "id": "Features/MVI/mvi",
    "title": "M V I",
    "route": "/Features/MVI/mvi",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css >Integration</h2>\n        <CodeBlock code={mviCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Testing Support</a> - Test your MVI navigation</li>\n          <li><a href="
  },
  {
    "id": "Features/Modular/modular",
    "title": "Modular",
    "route": "/Features/Modular/modular",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css ) {\n        startDestination(ProfileDestination.List)\n        \n        destination(ProfileDestination.List) { _, nav -> ... }\n        destination(ProfileDestination.Details) { _, nav -> ... }\n    }\n    \n    // Public entry points\n    val entryPoint: Destination = ProfileDestination.List\n}\n\n// Main app integrates feature\nval mainGraph = navigationGraph( >Feature Module Example</h2>\n        <CodeBlock code={modularCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >DI Integration</a> - Inject dependencies</li>\n          <li><a href="
  },
  {
    "id": "Features/Multiplatform/multiplatform",
    "title": "Multiplatform",
    "route": "/Features/Multiplatform/multiplatform",
    "content": "../Features.module.css >Next Steps</h2>\n        <ul>\n          <li><a href= >Predictive Back</a> - Platform-specific back navigation</li>\n          <li><a href= >Deep Links</a> - URL patterns and deep linking</li>\n          <li><a href="
  },
  {
    "id": "Features/Performance/performance",
    "title": "Performance",
    "route": "/Features/Performance/performance",
    "content": "../Features.module.css >Optimizations</h2>\n        <ul>\n          <li><strong>Lazy Loading:</strong> Destinations created only when needed</li>\n          <li><strong>Efficient State:</strong> StateFlow with structural sharing</li>\n          <li><strong>Smart Recomposition:</strong> Minimal recomposition on navigation</li>\n          <li><strong>No Reflection:</strong> Zero runtime reflection overhead</li>\n          <li><strong>Small Footprint:</strong> No external dependencies</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >No External Dependencies</h2>\n        <p>\n          Quo Vadis is completely self-contained with zero external navigation dependencies. \n          This means:\n        </p>\n        <ul>\n          <li>Smaller app size</li>\n          <li>No version conflicts</li>\n          <li>No dependency chain issues</li>\n          <li>Full control over updates</li>\n          <li>Better long-term stability</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Get started</a> with Quo Vadis</li>\n          <li><a href="
  },
  {
    "id": "Features/PredictiveBack/predictiveback",
    "title": "Predictive Back",
    "route": "/Features/PredictiveBack/predictiveback",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css >Supported Platforms</h2>\n        <ul>\n          <li><strong>Android 13+:</strong> System predictive back API</li>\n          <li><strong>iOS:</strong> Interactive pop gesture</li>\n          <li><strong>Custom Implementations:</strong> Desktop and Web</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Features</h2>\n        <ul>\n          <li>Smooth, interruptible animations</li>\n          <li>Cross-fade between screens</li>\n          <li>Scale and position transitions</li>\n          <li>Cancelable gestures</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Setup</h2>\n        <CodeBlock code={predictiveBackCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Transitions & Animations</a> - All transition types</li>\n          <li><a href="
  },
  {
    "id": "Features/SharedElements/sharedelements",
    "title": "Shared Elements",
    "route": "/Features/SharedElements/sharedelements",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css product_image_\\${product.id} >Example</h2>\n        <CodeBlock code={sharedElementCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Transition Types</h2>\n        <ul>\n          <li><strong>Bounds:</strong> Animate position and size</li>\n          <li><strong>Content:</strong> Cross-fade content</li>\n          <li><strong>Both:</strong> Animate bounds and content together</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Transitions & Animations</a> - All animation options</li>\n          <li><a href="
  },
  {
    "id": "Features/Testing/testing",
    "title": "Testing",
    "route": "/Features/Testing/testing",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css )\n    \n    // Assert\n    assertEquals(\n        ProductDestination.Details( >FakeNavigator</h2>\n        <CodeBlock code={testingCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Verification Methods</h2>\n        <ul>\n          <li><code>verifyNavigate(destination)</code> - Verify navigation to destination</li>\n          <li><code>verifyNavigateBack()</code> - Verify back navigation</li>\n          <li><code>clearCalls()</code> - Reset navigation call history</li>\n          <li><code>navigationCalls</code> - Access full navigation history</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Testing guide</a> in Getting Started</li>\n          <li><a href="
  },
  {
    "id": "Features/Transitions/transitions",
    "title": "Transitions",
    "route": "/Features/Transitions/transitions",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css >Custom Transitions</h2>\n        <CodeBlock code={customTransitionCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Shared Elements</a> - Advanced animations</li>\n          <li><a href= >Predictive Back</a> - Gesture-driven navigation</li>\n          <li><a href="
  },
  {
    "id": "Features/TypeSafe/typesafe",
    "title": "Type Safe",
    "route": "/Features/TypeSafe/typesafe",
    "content": "@components/CodeBlock/CodeBlock ../Features.module.css )\nsealed class FeatureDestination : Destination\n\n@Route( )\ndata object List : FeatureDestination()\n\n@Serializable\ndata class DetailData(val id: String, val mode: ViewMode = ViewMode.READ)\n\n@Route( )\n@Argument(DetailData::class)\ndata class Details(val id: String, val mode: ViewMode = ViewMode.READ) \n    : FeatureDestination(), TypedDestination<DetailData> {\n    override val data = DetailData(id, mode)\n}\n\n// Navigate with generated extension\nnavigator.navigateToDetails(id =  , mode = ViewMode.EDIT)`\n\nconst typeSafeManualCode = `// Define destinations manually\nsealed class FeatureDestination : Destination {\n    object List : FeatureDestination() {\n        override val route =  \n    }\n    \n    data class Details(\n        val id: String,\n        val mode: ViewMode = ViewMode.READ\n    ) : FeatureDestination() {\n        override val route =  \n        override val arguments = mapOf(\n              to mode.name\n        )\n    }\n}\n\n// Navigate with destination instance\nnavigator.navigate(FeatureDestination.Details( >Annotation-Based Approach (Recommended)</h2>\n        <CodeBlock code={typeSafeAnnotationCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Manual DSL Approach</h2>\n        <CodeBlock code={typeSafeManualCode} language=  />\n\n        <p>\n          Both approaches provide complete type safety and work seamlessly together. \n          The annotation-based approach requires less code and generates helpful extensions,\n          while the manual DSL offers more control for complex scenarios.\n        </p>\n      </section>\n\n      <section>\n        <h2 id= >Next Steps</h2>\n        <ul>\n          <li><a href= >Annotation-Based API</a> - Learn about code generation</li>\n          <li><a href= >Multiplatform Support</a> - Works on all platforms</li>\n          <li><a href="
  },
  {
    "id": "GettingStarted/gettingstarted",
    "title": "Getting Started",
    "route": "/GettingStarted/gettingstarted",
    "content": "@components/CodeBlock/CodeBlock ./GettingStarted.module.css com.google.devtools.ksp \n}\n\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                // Core navigation library\n                implementation( )\n                \n                // Annotation-based API (recommended)\n                implementation( )\n                \n                // For type-safe arguments\n                implementation( )\n            }\n        }\n    }\n}\n\ndependencies {\n    // KSP code generator\n    add( com.jermey.quo.vadis:quo-vadis-ksp:0.1.0 \nkotlinxSerialization =  \n\n[libraries]\nquo-vadis-core = { module =   }\nquo-vadis-annotations = { module =   }\nquo-vadis-ksp = { module =   }\nkotlinx-serialization-json = { module =  com.google.devtools.ksp  }\nkotlinSerialization = { id =   }\n\n# In build.gradle.kts\nplugins {\n    alias(libs.plugins.ksp)\n    alias(libs.plugins.kotlinSerialization)\n}\n\ndependencies {\n    implementation(libs.quo.vadis.core)\n    implementation(libs.quo.vadis.annotations)\n    implementation(libs.kotlinx.serialization.json)\n    add( )\nsealed class AppDestination : Destination {\n    @Route( )\n    data object Home : AppDestination()\n    \n    @Route( )\n    @Argument(ProfileData::class)\n    data class UserProfile(val userId: String, val tab: String =  ) \n        : AppDestination(), TypedDestination<ProfileData> {\n        override val data = ProfileData(userId, tab)\n    }\n    \n    @Route( ) {\n    startDestination(AppDestination.Home)\n    include(buildAppDestinationGraph())  // Auto-generated!\n}`\n\nconst navHostCode = `@Composable\nfun App() {\n    val navigator = rememberNavigator()\n    \n    LaunchedEffect(Unit) {\n        navigator.registerGraph(rootGraph())\n        navigator.setStartDestination(AppDestination.Home)\n    }\n    \n    GraphNavHost(\n        graph = rootGraph(),\n        navigator = navigator,\n        defaultTransition = NavigationTransitions.SlideHorizontal\n    )\n}`\n\nconst manualDSLCode = `// Define destinations manually\nsealed class AppDestination : Destination {\n    object Home : AppDestination() {\n        override val route =  \n    }\n    \n    data class UserProfile(val userId: String) : AppDestination() {\n        override val route =  \n        override val arguments = mapOf(  to userId)\n    }\n}\n\n// Build graph manually\nval mainGraph = navigationGraph( ) {\n    startDestination(AppDestination.Home)\n    \n    destination(AppDestination.Home) { _, navigator ->\n        HomeScreen(\n            onNavigateToProfile = { userId ->\n                navigator.navigate(AppDestination.UserProfile(userId))\n            }\n        )\n    }\n    \n    destination(SimpleDestination( )) { dest, navigator ->\n        val userId = dest.arguments[ ] as String\n        ProfileScreen(\n            userId = userId,\n            onBack = { navigator.navigateBack() }\n        )\n    }\n}`\n\nconst basicNavCode = `// Navigate to a destination\nnavigator.navigate(AppDestination.UserProfile( ))\n\n// Navigate with custom transition\nnavigator.navigate(\n    destination = AppDestination.Settings(),\n    transition = NavigationTransitions.FadeThrough\n)\n\n// Navigate back\nnavigator.navigateBack()\n\n// Navigate up (parent destination)\nnavigator.navigateUp()`\n\nconst advancedNavCode = `// Navigate and replace current screen\nnavigator.navigateAndReplace(AppDestination.Home)\n\n// Navigate and clear entire backstack\nnavigator.navigateAndClearAll(AppDestination.Home)\n\n// Navigate and clear to specific destination\nnavigator.navigateAndClearTo(\n    destination = AppDestination.Home,\n    clearRoute =  ,\n    inclusive = true\n)`\n\nconst transitionsCode = `// Available transitions\nNavigationTransitions.SlideHorizontal\nNavigationTransitions.SlideVertical\nNavigationTransitions.Fade\nNavigationTransitions.FadeThrough\nNavigationTransitions.ScaleIn\nNavigationTransitions.None\n\n// Use with navigation\nnavigator.navigate(\n    destination = AppDestination.Details( ),\n    transition = NavigationTransitions.SlideVertical\n)`\n\nconst customTransitionCode = `val customTransition = NavigationTransition(\n    enter = slideInHorizontally(\n        initialOffsetX = { it },\n        animationSpec = tween(300)\n    ) + fadeIn(),\n    exit = slideOutHorizontally(\n        targetOffsetX = { -it / 3 },\n        animationSpec = tween(300)\n    ) + fadeOut()\n)`\n\nconst sharedElementCode = `// Define shared element configuration\nval sharedConfig = SharedElementConfig(\n    key =  ,\n    type = SharedElementType.Bounds\n)\n\n// Source screen\nImage(\n    painter = painterResource(item.image),\n    contentDescription = null,\n    modifier = Modifier\n        .sharedElement(\n            sharedConfig = sharedConfig,\n            navigator = navigator\n        )\n)\n\n// Destination screen - same key!\nImage(\n    painter = painterResource(item.image),\n    contentDescription = null,\n    modifier = Modifier\n        .sharedElement(\n            sharedConfig = sharedConfig,\n            navigator = navigator\n        )\n)`\n\nconst deepLinksCode = `// Register deep link patterns\nval graph = navigationGraph( myapp://profile/{userId} ] as String)\n    }\n    \n    deepLink( ) { args ->\n        AppDestination.Settings(args[ ] as String)\n    }\n}\n\n// Handle deep link\nnavigator.handleDeepLink(\n    DeepLink( )\n)`\n\nconst testingCode = `@Test\nfun \\`test navigation to profile\\`() {\n    val fakeNavigator = FakeNavigator()\n    val viewModel = MyViewModel(fakeNavigator)\n    \n    viewModel.onUserClicked( )\n    \n    assertEquals(\n        AppDestination.UserProfile( >Installation</h2>\n        <p>Add the Quo Vadis library to your Kotlin Multiplatform project.</p>\n\n        <h3 id= >Gradle (Kotlin DSL) - Recommended</h3>\n        <CodeBlock code={installationCode} language= >Version Catalog</h3>\n        <CodeBlock code={versionCatalogCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Basic Setup (Annotation-based API)</h2>\n        <p>The <strong>annotation-based API</strong> is the recommended approach. It uses KSP to generate navigation code automatically, reducing boilerplate by 70%.</p>\n        \n        <h3 id= >Step 1: Define Destinations with Annotations</h3>\n        <p>Create type-safe destinations using sealed classes with annotations:</p>\n        <CodeBlock code={destinationsCode} language= >Step 2: Define Content Functions</h3>\n        <p>Use <code>@Content</code> to wire Composables to destinations:</p>\n        <CodeBlock code={contentCode} language= >Step 3: Use Generated Graph</h3>\n        <p>KSP automatically generates a graph builder function:</p>\n        <CodeBlock code={graphCode} language= >Step 4: Setup NavHost</h3>\n        <p>Integrate the navigation host in your app:</p>\n        <CodeBlock code={navHostCode} language= >Alternative: Manual DSL Approach</h2>\n        <p>For dynamic navigation or fine-grained control, use the manual DSL approach:</p>\n        <CodeBlock code={manualDSLCode} language=  showLineNumbers />\n      </section>\n\n      <section>\n        <h2 id= >Navigation Operations</h2>\n        \n        <h3 id= >Basic Navigation</h3>\n        <CodeBlock code={basicNavCode} language= >Advanced Navigation</h3>\n        <CodeBlock code={advancedNavCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Transitions</h2>\n        <p>Quo Vadis includes several built-in transitions:</p>\n        <CodeBlock code={transitionsCode} language= >Custom Transitions</h3>\n        <CodeBlock code={customTransitionCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Shared Element Transitions</h2>\n        <p>Create stunning shared element animations:</p>\n        <CodeBlock code={sharedElementCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Deep Links</h2>\n        <p>Handle deep links across all platforms:</p>\n        <CodeBlock code={deepLinksCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Testing</h2>\n        <p>Use FakeNavigator for easy unit testing:</p>\n        <CodeBlock code={testingCode} language=  />\n      </section>\n\n      <section>\n        <h2 id= >Platform-Specific Setup</h2>\n        \n        <h3 id= >Android</h3>\n        <CodeBlock code={androidCode} language= >Next Steps</h2>\n        <ul>\n          <li><a href= >Explore all features</a> - Deep dive into advanced capabilities</li>\n          <li><a href= >Check out the demo</a> - See real-world examples</li>\n          <li><a href= >Browse API reference</a> - Complete API documentation</li>\n          <li><a href="
  },
  {
    "id": "Home",
    "title": "Home",
    "route": "/Home",
    "content": "@components/CodeBlock/CodeBlock \n\nconst quickstartCode = `[versions]\nquoVadis =  \n\n[libraries]\nquo-vadis-core = { module =   }\nquo-vadis-annotations = { module =   }\n\n[plugins]\nksp = { id =   }`\n\nconst step1Code = `// Define your graph\n@Graph( )\nsealed class AppDestination : Destination\n\n// Add destinations with routes\n@Route( )\ndata object Home : AppDestination()\n\n@Serializable\ndata class DetailData(val id: String)\n\n@Route( )\n@Argument(DetailData::class)\ndata class Details(val id: String) : AppDestination(), \n    TypedDestination<DetailData> {\n    override val data = DetailData(id)\n}`\n\nconst step2Code = `@Content(Home::class)\n@Composable\nfun HomeContent(navigator: Navigator) {\n    HomeScreen(\n        onNavigateToDetails = { id ->\n            // Use generated extension\n            navigator.navigateToDetails(id = id)\n        }\n    )\n}\n\n@Content(Details::class)\n@Composable\nfun DetailsContent(data: DetailData, navigator: Navigator) {\n    DetailsScreen(\n        itemId = data.id,\n        onBack = { navigator.navigateBack() }\n    )\n}`\n\nconst step3Code = `@Composable\nfun App() {\n    val navigator = rememberNavigator()\n    val graph = remember { buildAppDestinationGraph() }\n    \n    GraphNavHost(\n        graph = graph,\n        navigator = navigator,\n        defaultTransition = NavigationTransitions.SlideHorizontal\n    )\n}`\n\nconst manualDSLCode = `// Define destinations manually\nsealed class AppDestination : Destination {\n    object Home : AppDestination() {\n        override val route =  \n    }\n    \n    data class Details(val id: String) : AppDestination() {\n        override val route =  \n        override val arguments = mapOf(  to id)\n    }\n}\n\n// Build graph manually\nval appGraph = navigationGraph(  />\n          <img src=  />\n          <img src=  />\n          <img src=  />\n          <img src=  />\n          <img src=  />\n          <img src=  />\n          <img src= >Overview</h2>\n        <p>\n          <strong>Quo Vadis</strong> (Latin for  >👀 Show Me The Code!</h2>\n        <p style={{ textAlign:  >Or Use Manual DSL for Full Control</h2>\n        <p style={{ marginBottom:   }}>\n          Prefer full control? The manual DSL API is still available for advanced use cases:\n        </p>\n        <CodeBlock code={manualDSLCode} language=  showLineNumbers />\n      </section>\n\n      {/* Why Choose */}\n      <section>\n        <h2 id= >Why Quo Vadis?</h2>\n        \n        <h4>Modern Code Generation</h4>\n        <p>\n          The annotation-based API uses KSP (Kotlin Symbol Processing) to generate all boilerplate code automatically.\n          Write 50-70% less code while maintaining complete type safety and IDE support. The manual DSL is still \n          available for advanced use cases requiring fine-grained control.\n        </p>\n\n        <h4>Built for Modern Apps</h4>\n        <p>\n          Quo Vadis was designed from the ground up for Kotlin Multiplatform and Compose Multiplatform. \n          It embraces modern patterns like MVI, reactive state management with Flow, and type-safe APIs.\n        </p>\n\n        <h4>No External Dependencies</h4>\n        <p>\n          The core library is completely self-contained with no external navigation dependencies. \n          This means smaller app sizes and no conflicts with other libraries.\n        </p>\n\n        <h4>Beautiful Transitions</h4>\n        <p>\n          Built-in support for shared element transitions, predictive back gestures, and custom animations. \n          Create polished, native-feeling apps with minimal effort.\n        </p>\n      </section>\n\n      {/* Platform Support */}\n      <section>\n        <h2 id= >Resources</h2>\n        <ul>\n          <li><a href= >Getting Started Guide</a> - Installation and basic setup</li>\n          <li><a href= >Features Documentation</a> - Detailed feature explanations</li>\n          <li><a href= >API Reference</a> - Complete API documentation</li>\n          <li><a href= >Demo Application</a> - See all features in action</li>\n          <li><a href="
  }
]