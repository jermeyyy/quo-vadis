package com.jermey.quo.vadis.ksp

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ksp.writeTo

/**
 * Generates route constants for compile-time safety.
 */
object RouteConstantsGenerator {
    
    fun generate(graphInfo: GraphInfo, codeGenerator: CodeGenerator, logger: KSPLogger) {
        val fileName = "${graphInfo.className}Routes"
        
        val fileSpec = FileSpec.builder(graphInfo.packageName, fileName)
            .addFileComment("Generated by Quo Vadis KSP. Do not edit manually.")
            .apply {
                // Generate object with route constants
                val routesObject = TypeSpec.objectBuilder("${graphInfo.className}Routes")
                    .addKdoc(
                        """
                        Route constants for ${graphInfo.className}.
                        
                        Generated for compile-time safety and IDE autocomplete.
                        """.trimIndent()
                    )
                
                graphInfo.destinations.forEach { dest ->
                    routesObject.addProperty(
                        PropertySpec.builder(dest.name.uppercase(), String::class)
                            .addModifiers(KModifier.CONST)
                            .initializer("%S", dest.route)
                            .addKdoc("Route for ${dest.name}: `${dest.route}`")
                            .build()
                    )
                }
                
                addType(routesObject.build())
            }
            .build()
        
        fileSpec.writeTo(codeGenerator, Dependencies(false, graphInfo.graphClass.containingFile!!))
        logger.info("Generated route constants: $fileName")
    }
}
