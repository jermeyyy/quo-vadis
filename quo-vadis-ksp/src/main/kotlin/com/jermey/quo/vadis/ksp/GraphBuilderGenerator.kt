package com.jermey.quo.vadis.ksp

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.LambdaTypeName
import com.squareup.kotlinpoet.UNIT
import com.squareup.kotlinpoet.ksp.writeTo

/**
 * Generates simplified graph builder functions.
 */
object GraphBuilderGenerator {
    
    fun generate(graphInfo: GraphInfo, codeGenerator: CodeGenerator, logger: KSPLogger) {
        val fileName = "${graphInfo.className}GraphBuilder"
        
        val fileSpec = FileSpec.builder(graphInfo.packageName, fileName)
            .addFileComment("Generated by Quo Vadis KSP. Do not edit manually.")
            .addImport("com.jermey.quo.vadis.core.navigation.core", "navigationGraph")
            .addImport("com.jermey.quo.vadis.core.navigation.core", "NavigationGraph")
            .apply {
                generateGraphBuilderFunction(graphInfo)
            }
            .build()
        
        fileSpec.writeTo(codeGenerator, Dependencies(false, graphInfo.graphClass.containingFile!!))
        logger.info("Generated graph builder: $fileName")
    }
    
    private fun FileSpec.Builder.generateGraphBuilderFunction(graphInfo: GraphInfo) {
        val builderLambdaType = LambdaTypeName.get(
            receiver = ClassName("com.jermey.quo.vadis.core.navigation.core", "NavigationGraphBuilder"),
            returnType = UNIT
        )
        
        val initClassName = "${graphInfo.className}RouteInitializer"
        
        addFunction(
            FunSpec.builder("${graphInfo.className.replaceFirstChar { it.lowercase() }}Graph")
                .addParameter("builder", builderLambdaType)
                .returns(ClassName("com.jermey.quo.vadis.core.navigation.core", "NavigationGraph"))
                .addKdoc(
                    """
                    Creates a navigation graph for ${graphInfo.className}.
                    
                    Auto-generated from @Graph("${graphInfo.graphName}") annotation.
                    
                    @param builder DSL lambda for configuring destinations
                    @return Configured NavigationGraph
                    """.trimIndent()
                )
                .addStatement("// Ensure routes are registered")
                .addStatement("%N", initClassName)
                .addStatement("return navigationGraph(%S, builder)", graphInfo.graphName)
                .build()
        )
    }
}
