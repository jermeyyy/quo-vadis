package com.jermey.quo.vadis.ksp

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.buildCodeBlock

/**
 * Generates a single route initialization function that references all route initializers.
 * 
 * This eliminates the need for manual route initialization - just call the generated
 * `initializeQuoVadisRoutes()` function once at app startup.
 */
object RouteInitializationGenerator {
    
    fun generate(
        allGraphInfos: List<GraphInfo>,
        codeGenerator: CodeGenerator,
        logger: KSPLogger
    ) {
        if (allGraphInfos.isEmpty()) {
            logger.warn("No graphs found, skipping route initialization generation")
            return
        }
        
        // Determine the common package (use the first graph's package as base)
        val basePackage = allGraphInfos.first().packageName
        
        logger.info("Generating route initialization function in package: $basePackage")
        
        val fileSpec = buildFileSpec(allGraphInfos, basePackage)
        
        val file = codeGenerator.createNewFile(
            dependencies = Dependencies(
                aggregating = true,
                sources = allGraphInfos.mapNotNull { it.graphClass.containingFile }.toTypedArray()
            ),
            packageName = basePackage,
            fileName = "QuoVadisRouteInitialization"
        )
        
        file.writer().use { writer ->
            fileSpec.writeTo(writer)
        }
        
        logger.info("Generated route initialization function: initializeQuoVadisRoutes()")
    }
    
    private fun buildFileSpec(
        allGraphInfos: List<GraphInfo>,
        packageName: String
    ): FileSpec {
        return FileSpec.builder(packageName, "QuoVadisRouteInitialization")
            .addFileComment("Generated by Quo Vadis KSP. Do not edit manually.")
            .addFunction(buildInitFunction(allGraphInfos))
            .build()
    }
    
    private fun buildInitFunction(
        allGraphInfos: List<GraphInfo>
    ): FunSpec {
        return FunSpec.builder("initializeQuoVadisRoutes")
            .addKdoc("Initializes all Quo Vadis route registrations.\n")
            .addKdoc("\n")
            .addKdoc("This function automatically references all generated route initializers,\n")
            .addKdoc("triggering their init blocks which register routes with the RouteRegistry.\n")
            .addKdoc("\n")
            .addKdoc("Call this once at application startup, typically in your main composable:\n")
            .addKdoc("```\n")
            .addKdoc("@Composable\n")
            .addKdoc("fun MyApp() {\n")
            .addKdoc("    remember { initializeQuoVadisRoutes() }\n")
            .addKdoc("    // ... rest of your app\n")
            .addKdoc("}\n")
            .addKdoc("```\n")
            .addKdoc("\n")
            .addKdoc("Generated initializers:\n")
            .apply {
                allGraphInfos.forEach { graphInfo ->
                    addKdoc("- %L\n", "${graphInfo.className}RouteInitializer")
                }
            }
            .addCode(
                buildCodeBlock {
                    addStatement("// Reference all route initializers to trigger their init blocks")
                    allGraphInfos.forEach { graphInfo ->
                        val initializerClass = ClassName(
                            graphInfo.packageName,
                            "${graphInfo.className}RouteInitializer"
                        )
                        addStatement("%T", initializerClass)
                    }
                }
            )
            .build()
    }
}
